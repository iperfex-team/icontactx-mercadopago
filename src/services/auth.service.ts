import { QRCode, User, VideoHelper } from "@/interfaces";
import { coreApi } from "@/lib/core.api";
import axios, { AxiosError, isAxiosError } from "axios";
// import { getUser } from "@/api/AuthApi";
import { TSuccessResponseSchema } from "@/types/ResponsesSchema";
import { ValidationErrorsSchema } from "@/types";

// Generated by https://quicktype.io
export interface LoginResponse {
    icid: string;
    message: string;
    status: number;
    token: string;
    totp: boolean;
}

export class AuthService {
    static login = async (
        email: string,
        password: string
    ): Promise<LoginResponse> => {
        try {
            const { data } = await coreApi.post<LoginResponse>("/login", {
                email,
                password,
            });

            return data;
        } catch (error) {
            if (error instanceof AxiosError) {
                throw error.response?.data.errors;
            }
            throw new Error("An error occurred while logging in.");
        }
    };

    static getUser = async (): Promise<User> => {
        try {
            const { data } = await coreApi.get<User>("/users/data");

            return data;
        } catch (error) {
            console.error(error);
            throw new Error("An error occurred while getting user data.");
        }
    };

    static getHelper = async (
        module: string,
        section: string
    ): Promise<VideoHelper> => {
        try {
            const { data } = await coreApi.get<VideoHelper>(
                `/helper?m=${module}&s=${section}`
            );
            return data;
        } catch (error) {
            console.error(error);
            throw new Error("An error occurred while getting helper data.");
        }
    };

    static getQRCode = async (): Promise<QRCode> => {
        try {
            const { data } = await coreApi.post<QRCode>("/2fa/createcode2fa");
            return data;
        } catch (error) {
            console.error(error);
            throw new Error("An error occurred while getting QR code.");
        }
    };

    static verify2FA = async (
        code: string
    ): Promise<TSuccessResponseSchema> => {
        try {
            const { data } = await coreApi.post<TSuccessResponseSchema>(
                "/2fa/validatecode2fa",
                { code }
            );

            return data;
        } catch (error) {
            console.error(error);
            throw new Error("An error occurred while verifying 2FA code.");
        }
    };

    static activateUser = async (payload: {
        token: string;
        icid: string;
    }): Promise<TSuccessResponseSchema> => {
        try {
            const { data } = await axios.post<TSuccessResponseSchema>(
                `${import.meta.env.VITE_CORE_API_URL as string}/users/activate`,
                {},
                {
                    headers: {
                        "Content-Type": "application/json",
                        Authorization: `Bearer ${payload.token}`,
                        icid: payload.icid,
                    },
                }
            );
            return data;
        } catch (error) {
            console.error(error);
            if (isAxiosError(error) && error.response) {
                const { errors } = ValidationErrorsSchema.parse(
                    error.response.data
                );

                throw new Error(
                    errors
                        .map((error) => `${error.source}: ${error.message}`)
                        .join("\n")
                );
            }

            throw error;
        }
    };
}
